package com.aallam.openai.api.chat

import com.aallam.openai.api.OpenAIDsl
import com.aallam.openai.api.chat.internal.ContentPartsSerializer
import com.aallam.openai.api.chat.internal.ContentSerializer
import com.aallam.openai.api.chat.internal.MessageSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlin.jvm.JvmInline

/**
 * Represents a chat message.
 */
@Serializable(with = MessageSerializer::class)
public sealed interface Message {
    /**
     * The role of the author of this message.
     */
    public val role: ChatRole
}

@Serializable
public data class SystemMessage(
    /**
     * The content of the message.
     */
    @SerialName("content") public val content: String? = null,
    /**
     * The author's name of this message.
     */
    @SerialName("name") public val name: String? = null,
) : Message {
    @SerialName("role")
    public override val role: ChatRole = ChatRole.System
}

@Serializable
public data class UserMessage(
    /**
     * The content of the message.
     */
    @SerialName("content") public val content: Content? = null,
) : Message {
    @SerialName("role")
    public override val role: ChatRole = ChatRole.User
}

@Serializable
public data class AssistantMessage(
    /**
     * The author's name of this message.
     */
    @SerialName("name") public val name: String? = null,
    @SerialName("tool_calls") public val toolCalls: List<ToolCall>? = null,
) : Message {
    @SerialName("role")
    public override val role: ChatRole = ChatRole.Assistant
}

@Serializable
public data class ToolMessage(
    @SerialName("tool_call_id") public val toolCallId: ToolId? = null,
    /**
     * The content of the message.
     */
    @SerialName("content") public val content: String? = null,
) : Message {
    @SerialName("role")
    public override val role: ChatRole = ChatRole.Tool
}

@Serializable
@Deprecated("Deprecated in favor of ToolMessage")
public data class FunctionMessage(
    /**
     * The name of the author of this message.
     * [name] is required if the role is `[ChatRole.Function], and it should be the name of the function whose response is
     * in the [content]. It May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     */
    @SerialName("name") public val name: String? = null,
    /**
     * The content of the message.
     */
    @SerialName("content") public val content: String? = null,
) : Message {
    @SerialName("role")
    public override val role: ChatRole = ChatRole.Function
}

/**
 * The messages to generate chat completions for.
 */
@Serializable
public data class ChatMessage(
    /**
     * The role of the author of this message.
     */
    @SerialName("role") public override val role: ChatRole,

    /**
     * The contents of the message.
     * **This is required for requests, and optional for responses**.
     */
    @SerialName("content") public val content: String? = null,

    /**
     * The name of the author of this message.
     * [name] is required if the role is `[ChatRole.Function], and it should be the name of the function whose response is
     * in the [content]. It May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     */
    @SerialName("name") public val name: String? = null,

    /**
     * The name and arguments of a function that should be called, as generated by the model.
     */
    @Deprecated(message = "Deprecated in favor of toolCalls")
    @SerialName("function_call") public val functionCall: FunctionCall? = null,

    /**
     * The tool calls generated by the model, such as function calls.
     */
    @SerialName("tool_calls") public val toolCalls: List<ToolCall>? = null,

    /**
     * Tool call ID.
     */
    @SerialName("tool_call_id") public val toolCallId: ToolId? = null,
) : Message

@Serializable(with = ContentSerializer::class)
public sealed interface Content {

    @JvmInline
    @Serializable
    public value class Text(public val content: String) : Content

    @Serializable(with = ContentPartsSerializer::class)
    public data class Parts(public val parts: List<MessageContent>) : Content
}


public sealed interface MessageContent {
    public val type: String
}

public data class TextContent(public val text: String) : MessageContent {
    @SerialName("type")
    override val type: String = "text"
}


public data class ImageContent(
    public val imageUrl: ImageURL,
) : MessageContent {

    public constructor(
        url: String,
        detail: String? = null,
    ) : this(ImageURL(url, detail))

    @SerialName("type")
    override val type: String = "image_url"

    public data class ImageURL(
        /**
         * Either a URL of the image or the base64 encoded image data.
         */
        @SerialName("url") val url: String,

        /**
         * Specifies the detail level of the image.
         */
        @SerialName("detail") val detail: String? = null,
    )
}

/**
 * The messages to generate chat completions for.
 */
public fun chatMessage(block: ChatMessageBuilder.() -> Unit): ChatMessage =
    ChatMessageBuilder().apply(block).build()

/**
 * Builder of [ChatMessageBuilder] instances.
 */
@OpenAIDsl
public class ChatMessageBuilder {

    /**
     * The role of the author of this message.
     */
    public var role: ChatRole? = null

    /**
     * The contents of the message.
     */
    public var content: String? = null

    /**
     * The name of the author of this message.
     * [name] is required if the role is `[ChatRole.Function], and it should be the name of the function whose response is
     * in the [content]. It May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     */
    public var name: String? = null

    /**
     * The name and arguments of a function that should be called, as generated by the model.
     */
    @Deprecated(message = "Deprecated in favor of toolCalls")
    public var functionCall: FunctionCall? = null

    /**
     * The tool calls generated by the model, such as function calls.
     */
    public var toolCalls: List<ToolCall>? = null

    /**
     * Tool call ID.
     */
    public var toolCallId: ToolId? = null

    /**
     * Create [ChatMessage] instance.
     */
    public fun build(): ChatMessage {
        return ChatMessage(
            role = requireNotNull(role) { "role is required " },
            content = content,
            name = name,
            functionCall = functionCall,
            toolCalls = toolCalls,
            toolCallId = toolCallId,
        )
    }
}

@OpenAIDsl
public class ContentPartBuilder {

    internal val parts = mutableListOf<MessageContent>()

    /**
     * Text content part.
     *
     * @param text the text content.
     */
    public fun text(text: String) {
        this.parts += TextContent(text)
    }

    /**
     * Image content part.
     *
     * @param url the image url.
     * @param detail the image detail.
     */
    public fun image(url: String, detail: String? = null) {
        this.parts += ImageContent(url, detail)
    }
}

public class SystemMessageBuilder {

    private val messageBuilder = ChatMessageBuilder()

    /**
     * The contents of system message.
     */
    public var content: String?
        get() = messageBuilder.content
        set(value) {
            messageBuilder.content = value
        }

    /**
     * An optional name for the participant.
     */
    public var name: String? by messageBuilder::name

    /**
     * Build a system chat message.
     */
    public fun build(): ChatMessage {
        messageBuilder.role = ChatRole.System
        return messageBuilder.build()
    }
}

public class UserMessageBuilder {

    private val messageBuilder = ChatMessageBuilder()

    /**
     * The contents of the message.
     */
    public var content: String?
        get() = messageBuilder.content
        set(value) {
            messageBuilder.content = value
        }
}

public class AssistantMessageBuilder {

}

public class ToolMessageBuilder {

}