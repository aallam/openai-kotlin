package com.aallam.openai.api.responses

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlin.jvm.JvmInline

/**
 * A single output item in the response
 */
@Serializable
public sealed interface ResponseOutput : ResponseItem {

    /**
     * The ID of the output item.
     * Will always be populated when coming from the API. It is optional here, so you can construct your own ResponseMessages.
     */
    @SerialName("id")
    public val id: String?

    /**
     * The status of the item, one of "in_progress", "completed", or "incomplete".
     * Will always be populated when coming from the AP. It is optional here, so you can construct your own OutputMessages
     */
    @SerialName("status")
    public val status: ResponseStatus?
}


/**
 * A message input to the model with a role indicating instruction following hierarchy. Instructions given with the developer or system role take precedence over instructions given with the user role. Messages with the assistant role are presumed to have been generated by the model in previous interactions.
 *
 */
@Serializable
@SerialName("message")
public data class ResponseMessage(


    /**
     * The role of the author of this message.
     */
    @SerialName("role") public val role: ResponseRole,

    /**
     * A list of one or many input items to the model, containing different content types.
     *
     * Important:
     * If the role is "Assistant", only ResponseOutputText and Refusal are allowed in the content.
     * If the role is "System", only ResponseInputText is allowed in the content.
     * If the role is "User", only ResponseInputText, ResponseInputImage,
     * and ResponseInputFile are allowed in the content.
     *
     * Note: If we were to implement this with proper polymorphism,
     * serialization breaks because of the common "message" type.
     */
    @SerialName("content") public val content: List<ResponseContent> = emptyList(),


    /**
     * The unique ID of the input message.
     */
    @SerialName("id") public override val id: String? = null,

    /**
     * The status of item. One of in_progress, completed, or incomplete. Populated when items are returned via API.
     */
    @SerialName("status") public override val status: ResponseStatus? = null,
) : ResponseOutput

/**
 * Represents a chat message part.
 */
@Serializable
public sealed interface ResponseContent

/**
 * Text output from the model
 */
@Serializable
@SerialName("output_text")
public data class ResponseOutputText(

    /**
     * The text output from the model.
     */
    @SerialName("text")
    val text: String,

    /**
     * The annotations of the text output.
     */
    @SerialName("annotations")
    val annotations: List<Annotation> = emptyList()
) : ResponseContent

/**
 * Refusal message from the model
 */
@Serializable
@SerialName("refusal")
public data class Refusal(

    /**
     * The refusal explanation from the model.
     */
    @SerialName("refusal")
    val refusal: String
) : ResponseContent

/**
 * A text input to the model.
 *
 * @param text the text content.
 */
@Serializable
@SerialName("input_text")
public data class ResponseInputText(@SerialName("text") val text: String) : ResponseContent

/**
 * An image input to the model.
 *
 * @param imageUrl the image url.
 */
@Serializable
@SerialName("input_image")
public data class ResponseInputImage(
    /**
     * The detail level of the image to be sent to the model. One of high, low, or auto. Defaults to auto.
     * */
    @SerialName("detail") val detail: ImageDetail? = null,
    /**
     * The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
     * */
    @SerialName("image_url") val imageUrl: String? = null,
    /**
     * The ID of the file to be sent to the model.
     */
    @SerialName("file_id") val fileId: String? = null,
) : ResponseContent


/**
 * The detail level of the image to be sent to the model.
 */
@JvmInline
@Serializable
public value class ImageDetail(public val value: String) {
    public companion object {
        public val High: ImageDetail = ImageDetail("high")
        public val Low: ImageDetail = ImageDetail("low")
        public val Auto: ImageDetail = ImageDetail("auto")
    }
}

/**
 * A file input to the model.
 */
@Serializable
@SerialName("input_file")
public data class ResponseInputFile(

    /**
     * The content of the file to be sent to the model.
     *
     */
    @SerialName("file_data") val fileData: String? = null,

    /**
     * The ID of the file to be sent to the model.
     */
    @SerialName("file_id") val fileId: String? = null,

    /**
     * The name of the file to be sent to the model.
     */
    @SerialName("filename") val fileName: String? = null,
) : ResponseContent


//TODO add input_audio (when available)


/**
 * An annotation in text output
 */
@Serializable
public sealed interface Annotation

/**
 * A citation to a file.
 */
@Serializable
@SerialName("file_citation")
public data class FileCitation(
    /**
     * The ID of the file.
     *
     */
    @SerialName("file_id")
    val fileId: String,

    /**
     * The index of the file in the list of files.
     */
    @SerialName("index")
    val index: Int

) : Annotation

/**
 * A citation for a web resource used to generate a model response.
 */
@Serializable
@SerialName("url_citation")
public data class UrlCitation(

    /**
     * The title of the web resource.
     */
    @SerialName("title")
    val title: String,

    /**
     * The URL of the web resource.
     */
    @SerialName("url")
    val url: String,

    /**
     * The index of the first character of the URL citation in the message.
     */
    @SerialName("start_index")
    val startIndex: Int,

    /**
     * The index of the last character of the URL citation in the message.
     */
    @SerialName("end_index")
    val endIndex: Int
) : Annotation

/**
 * A path to a file.
 */
@Serializable
@SerialName("file_path")
public data class FilePath(

    /**
     * The ID of the file.
     */
    @SerialName("file_id")
    val fileId: String,

    /**
     * The index of the file in the list of files.
     */
    @SerialName("index")
    val index: Int
) : Annotation


/**
 * Reasoning item for model reasoning
 */
@Serializable
@SerialName("reasoning")
public data class Reasoning(
    /**
     * The unique ID of the reasoning item.
     */
    @SerialName("id")
    override val id: String,

    /**
     * The status of the reasoning item.
     */
    @SerialName("status")
    override val status: ResponseStatus,

    /**
     * Reasoning text contents.
     */
    @SerialName("summary")
    val summary: List<SummaryText>
) : ResponseOutput

/**
 * A summary text item in the reasoning output
 */
@Serializable
@SerialName("summary_text")
public data class SummaryText(

    /**
     * A short summary of the reasoning used by the model.
     */
    @SerialName("text")
    val text: String
)
